import java.nio.file.Paths

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 29
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 25
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'org.robolectric:robolectric:4.3.1'

}
task("showMeTheBug", dependsOn: "test") {
    doLast {
        File file = new File(project.buildDir, "intermediates/unit_test_config_directory/debugUnitTest/out/com/android/tools/test_config.properties")
        Properties p = new Properties()
        file.withReader {
            p.load(it)
        }
        def resourcesPath = Paths.get(p.getProperty("android_resource_apk"))
        def rootPath = project.rootDir.toPath()

        println("resources path = $resourcesPath")
        println("project path   = $rootPath")
        if (resourcesPath.startsWith(rootPath)) {
            println("\u001B[32m This time using resources from project\u001B[0m")
        } else {
            println("\u001B[31mAccessing files outside of project due to inproper caching\u001B[0m")
        }


    }
}
